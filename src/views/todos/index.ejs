<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Round" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap">
    <title>Your Todo List</title>
</head>
<body>
    <div class="container">
        <div class="content-header">
            <h1>
                <% if (isToday) { %>
                    <span class="material-icons">wb_sunny</span> My Day
                <% } else { %>
                    <%= currentDate.toDateString() %>
                <% } %>
            </h1>
        </div>

        <div class="content-wrapper">
            <!-- Task creation form -->
            <div class="task-create-container">
                <form action="/todos" method="POST" class="task-create-form">
                    <input type="text" name="title" placeholder="Add a task" required>
                    <input type="hidden" name="dueDate" value="<%= currentDate.toISOString().substr(0, 10) %>">
                    <div class="task-create-actions">
                        <div class="task-create-options">
                            <button type="button" title="Set due date">
                                <span class="material-icons">calendar_today</span>
                            </button>
                            <button type="button" title="Add note">
                                <span class="material-icons">note</span>
                            </button>
                            <button type="button" id="importantBtn" title="Mark as important">
                                <span class="material-icons">star_border</span>
                                <input type="hidden" id="importantField" name="important" value="false">
                            </button>
                            <button type="button" title="Set category" id="categoryBtn">
                                <span class="material-icons">label</span>
                                <input type="hidden" id="categoryField" name="category" value="">
                            </button>
                        </div>
                        <button type="submit" class="btn">Add</button>
                    </div>
                </form>
            </div>

            <div class="date-navigation">
                <div class="date-nav-buttons">
                    <a href="/todos?dateOffset=<%= prevDate %>" class="btn"><span class="material-icons">chevron_left</span></a>
                    <% if (!isToday) { %>
                        <a href="/todos" class="btn"><span class="material-icons">today</span></a>
                    <% } %>
                    <a href="/todos?dateOffset=<%= nextDate %>" class="btn"><span class="material-icons">chevron_right</span></a>
                </div>
            </div>

            <div class="category-filter">
                <div class="category-filter-header">
                    <h3>Categories</h3>
                    <div>
                        <a href="/categories/manage" class="btn-icon" title="Manage categories">
                            <span class="material-icons">settings</span>
                        </a>
                        <button type="button" id="addCategoryBtn" class="btn-icon">
                            <span class="material-icons">add</span>
                        </button>
                    </div>
                </div>
                <div class="category-list">
                    <a href="/todos?dateOffset=<%= dateOffset %>" class="category-item <%= typeof categoryFilter === 'undefined' || categoryFilter === null ? 'active' : '' %>">
                        <span class="category-name">All</span>
                    </a>
                    <% if (typeof categories !== 'undefined' && Array.isArray(categories)) { %>
                        <% categories.forEach(category => { %>
                            <a href="/todos?dateOffset=<%= dateOffset %>&category=<%= category._id %>" 
                               class="category-item <%= categoryFilter === category._id.toString() ? 'active' : '' %>"
                               style="--category-color: <%= category.color %>">
                                <span class="category-color" style="background-color: <%= category.color %>"></span>
                                <span class="category-name"><%= category.name %></span>
                            </a>
                        <% }) %>
                    <% } %>
                </div>
            </div>

            <% if (todos.length === 0) { %>
                <div class="empty-state">
                    <div class="empty-icon"><span class="material-icons md-48">checklist</span></div>
                    <p class="empty-message">All caught up!</p>
                    <p>Add a task above to get started</p>
                </div>
            <% } else { %>
                <div class="task-section">
                    <ul class="todo-list" id="todo-list">
                        <% todos.forEach(todo => { %>
                            <li class="<%= todo.completed ? 'completed' : '' %> <%= todo.important ? 'important' : '' %>" 
                                draggable="true" 
                                data-id="<%= todo._id %>">
                                <div class="drag-handle">
                                    <span class="material-icons drag-icon">drag_indicator</span>
                                </div>
                                <div class="todo-checkbox" data-todo-id="<%= todo._id %>"></div>
                                <div class="todo-content">
                                    <div class="todo-content-text">
                                        <h3><%= todo.title %></h3>
                                        <% if (todo.description) { %>
                                            <p class="todo-description"><%= todo.description %></p>
                                        <% } %>
                                        <% if (todo.category) { %>
                                            <div class="todo-category" style="background-color: <%= todo.category.color %>">
                                                <%= todo.category.name %>
                                            </div>
                                        <% } %>
                                        <span class="due-date">
                                            <span class="material-icons md-18">calendar_today</span> 
                                            <%= formatDate(todo.dueDate) %>
                                        </span>
                                    </div>
                                </div>
                                <div class="todo-actions">
                                    <!-- Add important toggle button -->
                                    <form action="/todos/<%= todo._id %>/important?_method=PUT" method="POST" class="inline-form">
                                        <input type="hidden" name="important" value="<%= !todo.important %>">
                                        <button type="submit" title="<%= todo.important ? 'Remove importance' : 'Mark as important' %>" class="important-btn">
                                            <span class="material-icons"><%= todo.important ? 'star' : 'star_border' %></span>
                                        </button>
                                    </form>
                                    <form action="/todos/<%= todo._id %>?_method=PUT" method="POST" class="inline-form">
                                        <input type="hidden" name="completed" value="<%= !todo.completed %>">
                                        <button type="submit" title="<%= todo.completed ? 'Mark as incomplete' : 'Mark as complete' %>">
                                            <span class="material-icons"><%= todo.completed ? 'undo' : 'check' %></span>
                                        </button>
                                    </form>
                                    <form action="/todos/<%= todo._id %>?_method=DELETE" method="POST" class="inline-form">
                                        <button type="submit" title="Delete task">
                                            <span class="material-icons">delete</span>
                                        </button>
                                    </form>
                                </div>
                            </li>
                        <% }) %>
                    </ul>
                </div>
            <% } %>
        </div>
    </div>

    <%- include('../partials/footer.ejs') %>
    <script>
        // Add JavaScript to toggle the important status in the create form
        document.addEventListener('DOMContentLoaded', function() {
            const importantBtn = document.getElementById('importantBtn');
            const importantField = document.getElementById('importantField');
            
            if (importantBtn) {
                importantBtn.addEventListener('click', function() {
                    const icon = importantBtn.querySelector('.material-icons');
                    const isImportant = importantField.value === 'true';
                    
                    if (isImportant) {
                        icon.textContent = 'star_border';
                        importantField.value = 'false';
                        icon.style.color = ''; // Reset to default color
                    } else {
                        icon.textContent = 'star';
                        importantField.value = 'true';
                        icon.style.color = 'var(--warning)'; // Set to yellow (warning color)
                    }
                    
                    // Add animation
                    icon.classList.add('animate');
                    setTimeout(() => {
                        icon.classList.remove('animate');
                    }, 300);
                });
            }
        });
    </script>

    <!-- Add these modals right before the closing </body> tag -->

    <!-- Note Modal -->
    <div id="noteModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Add Note</h3>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="noteText">Note</label>
                    <textarea id="noteText" placeholder="Add more details about this task..."></textarea>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary close-modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveNote">Save</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Date Modal -->
    <div id="dateModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Set Due Date</h3>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="dueDatePicker">Due Date</label>
                    <input type="date" id="dueDatePicker" value="<%= currentDate.toISOString().substr(0, 10) %>">
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary close-modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveDate">Save</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Category Modal -->
    <div id="categoryModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Set Category</h3>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <div class="category-selector">
                    <div class="category-option" data-id="">
                        <span class="category-name">None</span>
                    </div>
                    <% if (typeof categories !== 'undefined' && Array.isArray(categories)) { %>
                        <% categories.forEach(category => { %>
                            <div class="category-option" data-id="<%= category._id %>">
                                <span class="category-color" style="background-color: <%= category.color %>"></span>
                                <span class="category-name"><%= category.name %></span>
                            </div>
                        <% }) %>
                    <% } %>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary close-modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveCategory">Save</button>
                    <button type="button" class="btn" id="manageCategories">Manage Categories</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Category Management Modal -->
    <div id="categoryManageModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Manage Categories</h3>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <div class="category-form">
                    <input type="text" id="newCategoryName" placeholder="New category name" class="form-control">
                    <input type="color" id="newCategoryColor" value="#4285f4">
                    <button id="createCategoryBtn" class="btn">Add</button>
                </div>
                <div class="category-list-manage">
                    <!-- Will be populated by JavaScript -->
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn close-modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Important star toggle functionality (existing code)
            const importantBtn = document.getElementById('importantBtn');
            const importantField = document.getElementById('importantField');
            
            if (importantBtn) {
                importantBtn.addEventListener('click', function() {
                    const icon = importantBtn.querySelector('.material-icons');
                    const isImportant = importantField.value === 'true';
                    
                    if (isImportant) {
                        icon.textContent = 'star_border';
                        importantField.value = 'false';
                        icon.style.color = ''; // Reset to default color
                    } else {
                        icon.textContent = 'star';
                        importantField.value = 'true';
                        icon.style.color = 'var(--warning)'; // Set to yellow (warning color)
                    }
                    
                    // Add animation
                    icon.classList.add('animate');
                    setTimeout(() => {
                        icon.classList.remove('animate');
                    }, 300);
                });
            }
            
            // Modal functionality
            const noteModal = document.getElementById('noteModal');
            const dateModal = document.getElementById('dateModal');
            const categoryModal = document.getElementById('categoryModal');
            const categoryManageModal = document.getElementById('categoryManageModal');
            let descriptionField = document.createElement('input');
            descriptionField.type = 'hidden';
            descriptionField.name = 'description';
            
            let dueDateField = document.querySelector('input[name="dueDate"]');
            let categoryField = document.getElementById('categoryField');
            
            // Add note button click handler
            const addNoteBtn = document.querySelector('.task-create-options button[title="Add note"]');
            if (addNoteBtn) {
                addNoteBtn.addEventListener('click', function() {
                    // If we already have a description, populate the textarea
                    const existingDesc = descriptionField.value;
                    if (existingDesc) {
                        document.getElementById('noteText').value = existingDesc;
                    }
                    
                    openModal(noteModal);
                });
            }
            
            // Set due date button click handler
            const setDateBtn = document.querySelector('.task-create-options button[title="Set due date"]');
            if (setDateBtn) {
                setDateBtn.addEventListener('click', function() {
                    // If we already have a date, populate the date picker
                    const existingDate = dueDateField.value;
                    if (existingDate) {
                        document.getElementById('dueDatePicker').value = existingDate;
                    }
                    
                    openModal(dateModal);
                });
            }
            
            // Set category button click handler
            const setCategoryBtn = document.querySelector('.task-create-options button[title="Set category"]');
            if (setCategoryBtn) {
                setCategoryBtn.addEventListener('click', function() {
                    openModal(categoryModal);
                });
            }
            
            // Save note button click handler
            document.getElementById('saveNote').addEventListener('click', function() {
                const noteText = document.getElementById('noteText').value.trim();
                
                // Add the description to the form
                const taskForm = document.querySelector('.task-create-form');
                if (!taskForm.contains(descriptionField)) {
                    taskForm.appendChild(descriptionField);
                }
                descriptionField.value = noteText;
                
                // Add visual indicator if note is present
                const noteBtn = document.querySelector('.task-create-options button[title="Add note"]');
                const icon = noteBtn.querySelector('.material-icons');
                if (noteText) {
                    icon.style.color = 'var(--primary)';
                    noteBtn.setAttribute('title', 'Edit note');
                } else {
                    icon.style.color = '';
                    noteBtn.setAttribute('title', 'Add note');
                }
                
                closeModal(noteModal);
            });
            
            // Save date button click handler
            document.getElementById('saveDate').addEventListener('click', function() {
                const selectedDate = document.getElementById('dueDatePicker').value;
                dueDateField.value = selectedDate;
                
                // Add visual indicator that date is set
                const dateBtn = document.querySelector('.task-create-options button[title="Set due date"]');
                const icon = dateBtn.querySelector('.material-icons');
                
                if (selectedDate && selectedDate !== '<%= currentDate.toISOString().substr(0, 10) %>') {
                    icon.style.color = 'var(--primary)';
                    dateBtn.setAttribute('title', 'Change due date');
                } else {
                    icon.style.color = '';
                    dateBtn.setAttribute('title', 'Set due date');
                }
                
                closeModal(dateModal);
            });
            
            // Save category button click handler
            document.getElementById('saveCategory').addEventListener('click', function() {
                const selectedCategory = document.querySelector('.category-option.selected');
                const categoryId = selectedCategory ? selectedCategory.getAttribute('data-id') : '';
                categoryField.value = categoryId;
                
                // Add visual indicator that category is set
                const categoryBtn = document.querySelector('.task-create-options button[title="Set category"]');
                const icon = categoryBtn.querySelector('.material-icons');
                
                if (categoryId) {
                    icon.style.color = 'var(--primary)';
                    categoryBtn.setAttribute('title', 'Change category');
                } else {
                    icon.style.color = '';
                    categoryBtn.setAttribute('title', 'Set category');
                }
                
                closeModal(categoryModal);
            });
            
            // Manage categories button click handler
            document.getElementById('manageCategories').addEventListener('click', function() {
                closeModal(categoryModal);
                openModal(categoryManageModal);
            });
            
            // Create category button click handler
            document.getElementById('createCategoryBtn').addEventListener('click', function() {
                const categoryName = document.getElementById('newCategoryName').value.trim();
                const categoryColor = document.getElementById('newCategoryColor').value;
                
                if (categoryName) {
                    fetch('/categories', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            name: categoryName,
                            color: categoryColor,
                        }),
                    })
                    .then(response => response.json())
                    .then(category => {
                        // Clear the input fields
                        document.getElementById('newCategoryName').value = '';
                        
                        // Refresh the category list
                        fetchAndDisplayCategories();
                        
                        // Show success message
                        showNotification('Category created successfully');
                        
                        // Reload the page to update the category filters and selector
                        // This ensures everything stays in sync
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    })
                    .catch(error => console.error('Error creating category:', error));
                }
            });
            
            // Delete category button click handler
            document.addEventListener('click', function(event) {
                if (event.target.classList.contains('delete-category')) {
                    const categoryId = event.target.getAttribute('data-id');
                    
                    // Send the delete request to the server
                    fetch(`/categories/${categoryId}`, {
                        method: 'DELETE'
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to delete category');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Remove the category from the list
                        const categoryOption = document.querySelector(`.category-option[data-id="${categoryId}"]`);
                        categoryOption.remove();
                    })
                    .catch(error => {
                        console.error('Error deleting category:', error);
                    });
                }
            });
            
            // Close modal buttons
            document.querySelectorAll('.close-modal').forEach(function(element) {
                element.addEventListener('click', function() {
                    closeModal(this.closest('.modal'));
                });
            });
            
            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                if (event.target.classList.contains('modal')) {
                    closeModal(event.target);
                }
            });
            
            // Functions to open and close modals
            function openModal(modal) {
                modal.style.display = 'flex';
                setTimeout(() => {
                    modal.classList.add('show');
                }, 10);
            }
            
            function closeModal(modal) {
                modal.classList.remove('show');
                setTimeout(() => {
                    modal.style.display = 'none';
                }, 300);
            }

            // Drag and Drop functionality
            const todoList = document.getElementById('todo-list');
            let draggedItem = null;
            
            // Add event listeners to all list items
            document.querySelectorAll('#todo-list li').forEach(item => {
                // Start dragging
                item.addEventListener('dragstart', function(e) {
                    draggedItem = this;
                    setTimeout(() => {
                        this.classList.add('dragging');
                    }, 0);
                    
                    // Store the item ID in the drag data
                    e.dataTransfer.setData('text/plain', this.getAttribute('data-id'));
                    e.dataTransfer.effectAllowed = 'move';
                });
                
                // Stop dragging
                item.addEventListener('dragend', function() {
                    this.classList.remove('dragging');
                    document.querySelectorAll('#todo-list li').forEach(item => {
                        item.classList.remove('drag-over');
                    });
                });
                
                // When dragging over an item
                item.addEventListener('dragover', function(e) {
                    e.preventDefault();
                    if (this !== draggedItem) {
                        this.classList.add('drag-over');
                    }
                });
                
                // When leaving an item during drag
                item.addEventListener('dragleave', function() {
                    this.classList.remove('drag-over');
                });
                
                // When dropping on an item
                item.addEventListener('drop', function(e) {
                    e.preventDefault();
                    
                    if (this !== draggedItem) {
                        let allItems = Array.from(todoList.querySelectorAll('li'));
                        let draggedIndex = allItems.indexOf(draggedItem);
                        let targetIndex = allItems.indexOf(this);
                        
                        if (draggedIndex < targetIndex) {
                            this.parentNode.insertBefore(draggedItem, this.nextSibling);
                        } else {
                            this.parentNode.insertBefore(draggedItem, this);
                        }
                        
                        this.classList.remove('drag-over');
                        
                        // Save the new order to the server
                        saveNewOrder();
                    }
                });
            });
            
            // Make the drag handle the trigger for dragging
            document.querySelectorAll('.drag-handle').forEach(handle => {
                handle.addEventListener('mousedown', function() {
                    this.parentNode.setAttribute('draggable', 'true');
                });
                
                handle.addEventListener('mouseup', function() {
                    this.parentNode.setAttribute('draggable', 'false');
                });
            });
            
            // Save the new order to the server
            function saveNewOrder() {
                const items = Array.from(todoList.querySelectorAll('li')).map((item, index) => {
                    return {
                        id: item.getAttribute('data-id'),
                        order: index
                    };
                });
                
                // Send the new order to the server
                fetch('/todos/reorder', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ items })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to save task order');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Task order saved successfully');
                })
                .catch(error => {
                    console.error('Error saving task order:', error);
                });
            }

            // Load categories for management modal
            document.getElementById('addCategoryBtn').addEventListener('click', function() {
                fetchAndDisplayCategories();
                openModal(categoryManageModal);
            });
            
            // Function to fetch and display categories in the management modal
            function fetchAndDisplayCategories() {
                fetch('/categories')
                    .then(response => response.json())
                    .then(categories => {
                        const categoryListManage = document.getElementById('category-list-manage');
                        categoryListManage.innerHTML = '';
                        
                        categories.forEach(category => {
                            const categoryItem = document.createElement('div');
                            categoryItem.className = 'category-list-item';
                            categoryItem.innerHTML = `
                                <div class="category-info">
                                    <span class="category-color" style="background-color: ${category.color}"></span>
                                    <span class="category-name">${category.name}</span>
                                </div>
                                <div class="category-actions">
                                    <button class="btn-icon edit-category" data-id="${category._id}" data-name="${category.name}" data-color="${category.color}">
                                        <span class="material-icons">edit</span>
                                    </button>
                                    <button class="btn-icon delete-category" data-id="${category._id}">
                                        <span class="material-icons">delete</span>
                                    </button>
                                </div>
                            `;
                            categoryListManage.appendChild(categoryItem);
                        });
                        
                        // Add event listeners for edit and delete buttons
                        addCategoryEventListeners();
                    })
                    .catch(error => console.error('Error fetching categories:', error));
            }
            
            // Add event listeners for category actions
            function addCategoryEventListeners() {
                // Edit category
                document.querySelectorAll('.edit-category').forEach(button => {
                    button.addEventListener('click', function() {
                        const categoryId = this.getAttribute('data-id');
                        const categoryName = this.getAttribute('data-name');
                        const categoryColor = this.getAttribute('data-color');
                        
                        // Change the list item to an edit form
                        const listItem = this.closest('.category-list-item');
                        const originalContent = listItem.innerHTML;
                        
                        listItem.innerHTML = `
                            <form class="category-edit-form">
                                <input type="text" class="edit-category-name" value="${categoryName}">
                                <input type="color" class="edit-category-color" value="${categoryColor}">
                                <div>
                                    <button type="button" class="btn-icon save-category-edit" data-id="${categoryId}">
                                        <span class="material-icons">check</span>
                                    </button>
                                    <button type="button" class="btn-icon cancel-category-edit">
                                        <span class="material-icons">close</span>
                                    </button>
                                </div>
                            </form>
                        `;
                        
                        // Add event listeners for save and cancel buttons
                        listItem.querySelector('.save-category-edit').addEventListener('click', function() {
                            const newName = listItem.querySelector('.edit-category-name').value.trim();
                            const newColor = listItem.querySelector('.edit-category-color').value;
                            
                            if (newName) {
                                updateCategory(categoryId, newName, newColor, listItem);
                            }
                        });
                        
                        listItem.querySelector('.cancel-category-edit').addEventListener('click', function() {
                            listItem.innerHTML = originalContent;
                            addCategoryEventListeners();
                        });
                    });
                });
                
                // Delete category
                document.querySelectorAll('.delete-category').forEach(button => {
                    button.addEventListener('click', function() {
                        const categoryId = this.getAttribute('data-id');
                        const listItem = this.closest('.category-list-item');
                        
                        if (confirm('Are you sure you want to delete this category? Tasks assigned to this category will be unassigned.')) {
                            fetch(`/categories/${categoryId}`, {
                                method: 'DELETE',
                            })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Failed to delete category');
                                }
                                return response.json();
                            })
                            .then(data => {
                                // Remove the category from the list
                                listItem.remove();
                                
                                // Show success message
                                showNotification('Category deleted successfully');
                                
                                // Reload the page after a short delay to update the UI
                                setTimeout(() => {
                                    window.location.reload();
                                }, 1000);
                            })
                            .catch(error => {
                                console.error('Error deleting category:', error);
                                showNotification('Error deleting category');
                            });
                        }
                    });
                });
            }
            
            // Create new category
            document.getElementById('createCategoryBtn').addEventListener('click', function() {
                const categoryName = document.getElementById('newCategoryName').value.trim();
                const categoryColor = document.getElementById('newCategoryColor').value;
                
                if (categoryName) {
                    fetch('/categories', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            name: categoryName,
                            color: categoryColor,
                        }),
                    })
                    .then(response => response.json())
                    .then(category => {
                        // Clear the input fields
                        document.getElementById('newCategoryName').value = '';
                        
                        // Refresh the category list
                        fetchAndDisplayCategories();
                        
                        // Show success message
                        showNotification('Category created successfully');
                        
                        // Reload the page to update the category filters and selector
                        // This ensures everything stays in sync
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    })
                    .catch(error => console.error('Error creating category:', error));
                }
            });
            
            // Update category function
            function updateCategory(categoryId, name, color, listItem) {
                fetch(`/categories/${categoryId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: name,
                        color: color,
                    }),
                })
                .then(response => response.json())
                .then(category => {
                    // Refresh the category list
                    fetchAndDisplayCategories();
                    
                    // Show success message
                    showNotification('Category updated successfully');
                })
                .catch(error => console.error('Error updating category:', error));
            }
            
            // Delete category function
            function deleteCategory(categoryId, listItem) {
                fetch(`/categories/${categoryId}`, {
                    method: 'DELETE',
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to delete category');
                    }
                    return response.json();
                })
                .then(data => {
                    // Remove the category from the list
                    listItem.remove();
                    
                    // Show success message
                    showNotification('Category deleted successfully');
                    
                    // Reload the page after a short delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                })
                .catch(error => {
                    console.error('Error deleting category:', error);
                    showNotification('Error deleting category');
                });
            }
            
            // Show notification function
            function showNotification(message) {
                const notification = document.createElement('div');
                notification.className = 'confirmation-message';
                notification.textContent = message;
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    notification.classList.add('show');
                }, 10);
                
                setTimeout(() => {
                    notification.classList.remove('show');
                    setTimeout(() => notification.remove(), 300);
                }, 3000);
            }

            // Make category options selectable
            document.querySelector('.category-selector').addEventListener('click', function(event) {
                const categoryOption = event.target.closest('.category-option');
                if (categoryOption) {
                    // Remove selected class from all options
                    document.querySelectorAll('.category-option').forEach(option => {
                        option.classList.remove('selected');
                    });
                    
                    // Add selected class to clicked option
                    categoryOption.classList.add('selected');
                }
            });
        });
    </script>
</body>
</html>