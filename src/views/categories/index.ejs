<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Round" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/animations.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap">
    <title>Manage Categories</title>
</head>
<body>
    <div class="container">
        <div class="content-header">
            <h1>
                <span class="material-icons">label</span> Manage Categories
            </h1>
            <a href="/todos" class="btn"><span class="material-icons">arrow_back</span> Back to Tasks</a>
        </div>

        <div class="content-wrapper">
            <div class="category-section">
                <!-- Create new category form -->
                <div class="category-create-container">
                    <form id="category-create-form" class="category-form">
                        <input type="text" id="newCategoryName" placeholder="New category name" required>
                        <input type="color" id="newCategoryColor" value="#4285f4">
                        <button type="submit" class="btn">Create Category</button>
                    </form>
                </div>

                <!-- Categories list -->
                <div class="categories-container">
                    <h2>Your Categories</h2>
                    
                    <div id="categories-list" class="categories-list">
                        <!-- Will be populated with JavaScript -->
                        <div class="loading-spinner">
                            <span class="material-icons spin">refresh</span> Loading...
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Category Modal -->
    <div id="editCategoryModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Edit Category</h3>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <form id="edit-category-form">
                    <input type="hidden" id="editCategoryId">
                    <div class="form-group">
                        <label for="editCategoryName">Category Name</label>
                        <input type="text" id="editCategoryName" required>
                    </div>
                    <div class="form-group">
                        <label for="editCategoryColor">Category Color</label>
                        <input type="color" id="editCategoryColor">
                    </div>
                    <div class="modal-actions">
                        <button type="button" class="btn btn-secondary close-modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmDeleteModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Confirm Delete</h3>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this category? Tasks assigned to this category will become uncategorized.</p>
                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary close-modal">Cancel</button>
                    <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <%- include('../partials/footer.ejs') %>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const categoryList = document.getElementById('categories-list');
            const createForm = document.getElementById('category-create-form');
            const editForm = document.getElementById('edit-category-form');
            const editModal = document.getElementById('editCategoryModal');
            const confirmModal = document.getElementById('confirmDeleteModal');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            
            // Variables to track current category being edited/deleted
            let currentCategoryId = null;
            
            // Fetch and display all categories
            fetchCategories();
            
            // Event listeners
            createForm.addEventListener('submit', createCategory);
            editForm.addEventListener('submit', updateCategory);
            
            // Close modals when clicking on X or outside
            document.querySelectorAll('.close-modal').forEach(btn => {
                btn.addEventListener('click', function() {
                    closeModal(this.closest('.modal'));
                });
            });
            
            window.addEventListener('click', function(e) {
                if (e.target.classList.contains('modal')) {
                    closeModal(e.target);
                }
            });
            
            // Fetch all categories from the server
            function fetchCategories() {
                categoryList.innerHTML = '<div class="loading-spinner"><span class="material-icons spin">refresh</span> Loading...</div>';
                
                fetch('/categories')
                    .then(response => response.json())
                    .then(categories => {
                        if (categories.length === 0) {
                            categoryList.innerHTML = '<div class="empty-message">No categories yet. Create one above!</div>';
                            return;
                        }
                        
                        categoryList.innerHTML = '';
                        categories.forEach(renderCategory);
                    })
                    .catch(error => {
                        console.error('Error fetching categories:', error);
                        categoryList.innerHTML = '<div class="error-message">Failed to load categories. Please try again.</div>';
                    });
            }
            
            // Create a new category
            function createCategory(e) {
                e.preventDefault();
                
                const name = document.getElementById('newCategoryName').value.trim();
                const color = document.getElementById('newCategoryColor').value;
                
                if (!name) return;
                
                fetch('/categories', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name, color }),
                })
                .then(response => response.json())
                .then(category => {
                    document.getElementById('newCategoryName').value = '';
                    renderCategory(category);
                    showNotification('Category created successfully');
                })
                .catch(error => {
                    console.error('Error creating category:', error);
                    showNotification('Error creating category', true);
                });
            }
            
            // Render a single category
            function renderCategory(category) {
                const categoryElement = document.createElement('div');
                categoryElement.className = 'category-item-large';
                categoryElement.dataset.id = category._id;
                
                categoryElement.innerHTML = `
                    <div class="category-item-content">
                        <span class="category-color" style="background-color: ${category.color}"></span>
                        <span class="category-name">${category.name}</span>
                    </div>
                    <div class="category-actions">
                        <button class="btn-icon edit-btn" title="Edit category">
                            <span class="material-icons">edit</span>
                        </button>
                        <button class="btn-icon delete-btn" title="Delete category">
                            <span class="material-icons">delete</span>
                        </button>
                    </div>
                `;
                
                // Add at the top of the list
                if (categoryList.firstChild) {
                    categoryList.insertBefore(categoryElement, categoryList.firstChild);
                } else {
                    categoryList.appendChild(categoryElement);
                }
                
                // Add event listeners to buttons
                const editBtn = categoryElement.querySelector('.edit-btn');
                const deleteBtn = categoryElement.querySelector('.delete-btn');
                
                editBtn.addEventListener('click', () => openEditModal(category));
                deleteBtn.addEventListener('click', () => openDeleteConfirmation(category._id));
            }
            
            // Open the edit modal
            function openEditModal(category) {
                document.getElementById('editCategoryId').value = category._id;
                document.getElementById('editCategoryName').value = category.name;
                document.getElementById('editCategoryColor').value = category.color;
                currentCategoryId = category._id;
                
                openModal(editModal);
            }
            
            // Update a category
            function updateCategory(e) {
                e.preventDefault();
                
                const id = document.getElementById('editCategoryId').value;
                const name = document.getElementById('editCategoryName').value.trim();
                const color = document.getElementById('editCategoryColor').value;
                
                if (!name) return;
                
                fetch(`/categories/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name, color }),
                })
                .then(response => response.json())
                .then(category => {
                    const categoryElement = document.querySelector(`.category-item-large[data-id="${category._id}"]`);
                    if (categoryElement) {
                        categoryElement.querySelector('.category-name').textContent = category.name;
                        categoryElement.querySelector('.category-color').style.backgroundColor = category.color;
                    }
                    
                    closeModal(editModal);
                    showNotification('Category updated successfully');
                })
                .catch(error => {
                    console.error('Error updating category:', error);
                    showNotification('Error updating category', true);
                });
            }
            
            // Open delete confirmation modal
            function openDeleteConfirmation(categoryId) {
                currentCategoryId = categoryId;
                confirmDeleteBtn.onclick = deleteCategory;
                openModal(confirmModal);
            }
            
            // Delete a category
            function deleteCategory() {
                fetch(`/categories/${currentCategoryId}`, {
                    method: 'DELETE',
                })
                .then(response => response.json())
                .then(data => {
                    const categoryElement = document.querySelector(`.category-item-large[data-id="${currentCategoryId}"]`);
                    if (categoryElement) {
                        categoryElement.remove();
                    }
                    
                    closeModal(confirmModal);
                    showNotification('Category deleted successfully');
                    
                    // If no categories left, show empty state
                    if (categoryList.children.length === 0) {
                        categoryList.innerHTML = '<div class="empty-message">No categories yet. Create one above!</div>';
                    }
                })
                .catch(error => {
                    console.error('Error deleting category:', error);
                    showNotification('Error deleting category', true);
                });
            }
            
            // Show notification
            function showNotification(message, isError = false) {
                const notification = document.createElement('div');
                notification.className = `confirmation-message ${isError ? 'error' : ''}`;
                notification.textContent = message;
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    notification.classList.add('show');
                }, 10);
                
                setTimeout(() => {
                    notification.classList.remove('show');
                    setTimeout(() => notification.remove(), 300);
                }, 3000);
            }
            
            // Modal functions
            function openModal(modal) {
                modal.style.display = 'flex';
                setTimeout(() => {
                    modal.classList.add('show');
                }, 10);
            }
            
            function closeModal(modal) {
                modal.classList.remove('show');
                setTimeout(() => {
                    modal.style.display = 'none';
                }, 300);
            }
        });
    </script>
    <script src="/js/animations.js"></script>

    <!-- Additional styles -->
    <style>
        .categories-list {
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .category-item-large {
            background: linear-gradient(145deg, var(--bg-card), var(--bg-elevated));
            border-radius: 8px;
            padding: 12px 16px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            transition: all 0.2s ease;
            border: 1px solid var(--border);
        }
        
        .category-item-large:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            transform: translateY(-1px);
        }
        
        .category-item-content {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .category-item-large .category-color {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: block;
        }
        
        .category-item-large .category-name {
            font-size: 16px;
        }
        
        .categories-container h2 {
            margin-top: 30px;
            margin-bottom: 15px;
            font-size: 18px;
            color: var(--text);
        }
        
        .loading-spinner {
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-light);
            padding: 20px;
            gap: 10px;
        }
        
        .spin {
            animation: spin 2s infinite linear;
        }
        
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .confirmation-message.error {
            background: var(--danger-gradient);
            color: white;
        }
        
        .category-create-container {
            margin-bottom: 20px;
        }
    </style>
</body>
</html>